{
  "rules": {
    // Global read/write rules for lists
    "lists": {
      "$listId": {
        // Validate readable ID format (letters, numbers, hyphens)
        ".validate": "$listId.matches(/^[a-zA-Z0-9\\-]{3,100}$/)",
        // Allow read/write access to any authenticated user (anonymous or signed-in)
        ".read": "auth != null",
        ".write": "auth != null",

        // Todos structure
        "todos": {
          "$todoId": {
            // Allow flexible todo structure with activity tracking fields

            // Todo fields validation
            "text": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 500"
            },
            "completed": {
              ".validate": "newData.isBoolean()"
            },
            "createdAt": {
              ".validate": "newData.isNumber() || newData.val() == now"
            },
            "createdBy": {
              ".validate": "newData.isString() && newData.val() == auth.uid"
            },
            "creatorName": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            "deletedAt": {
              ".validate": "newData.isNumber() || newData.val() == now || newData.val() == null"
            },
            "deletedBy": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },

            // Activity tracking fields
            "completedAt": {
              ".validate": "newData.isNumber() || newData.val() == now || newData.val() == null"
            },
            "completedBy": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            "updatedAt": {
              ".validate": "newData.isNumber() || newData.val() == now || newData.val() == null"
            },
            "updatedBy": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            "restoredAt": {
              ".validate": "newData.isNumber() || newData.val() == now || newData.val() == null"
            },
            "restoredBy": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },

            // Prevent additional fields
            "$other": {
              ".validate": false
            }
          }
        },

        // Presence structure
        "presence": {
          // Allow all authenticated users to read presence data (for avatars)
          ".read": "auth != null",

          "$userId": {
            // Users can only write their own presence
            ".write": "auth != null",


            // Validate presence structure
            ".validate": "newData.hasChildren(['name', 'color']) && (newData.hasChild('onlineAt') || newData.hasChild('lastSeen'))",

            // Presence fields validation
            "name": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            "color": {
              ".validate": "newData.isString() && newData.val().matches(/^#[0-9a-fA-F]{6}$/)"
            },
            "onlineAt": {
              ".validate": "newData.val() == now || newData.val() == null"
            },
            "lastSeen": {
              ".validate": "newData.isNumber() || newData.val() == now"
            },
            "isTyping": {
              ".validate": "newData.isBoolean()"
            },
            "editingTodoId": {
              ".validate": "newData.isString() || newData.val() == null"
            },

            // Prevent additional fields
            "$other": {
              ".validate": false
            }
          }
        },

        // List metadata (optional)
        "metadata": {
          // Allow read/write access to any authenticated user
          ".read": "auth != null",
          ".write": "auth != null",

          // Allow flexible metadata structure - name field is optional
          "name": {
            ".validate": "(newData.isString() && newData.val().length > 0 && newData.val().length <= 100) || newData.val() == null"
          },
          "title": {
            ".validate": "newData.isString() && newData.val().length <= 100"
          },
          "createdAt": {
            ".validate": "newData.isNumber() || newData.val() == now"
          },
          "createdBy": {
            ".validate": "newData.isString()"
          },
          "description": {
            ".validate": "newData.isString() && newData.val().length <= 500"
          },
          "isPublic": {
            ".validate": "newData.isBoolean()"
          }
        },

        // Admin and password system
        "admins": {
          ".read": "auth != null",
          ".write": "auth != null",

          "$adminId": {
            ".validate": "newData.hasChildren(['uid', 'name']) && newData.child('uid').val() == $adminId",

            "uid": {
              ".validate": "newData.isString() && newData.val() == $adminId"
            },
            "name": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            "claimedAt": {
              ".validate": "newData.isNumber() || newData.val() == now"
            },
            "isLocallyStored": {
              ".validate": "newData.isBoolean()"
            }
          }
        },

        // Password protection settings
        "passwords": {
          ".read": "auth != null",
          ".write": "auth != null",

          "adminPassword": {
            ".validate": "newData.isString() && newData.val().length >= 1 && newData.val().length <= 100"
          },
          "normalPassword": {
            ".validate": "newData.isString() && newData.val().length >= 1 && newData.val().length <= 100"
          },
          "guestPassword": {
            ".validate": "newData.isString() && newData.val().length >= 1 && newData.val().length <= 100"
          },
          "enabledModes": {
            ".validate": "newData.hasChildren() || newData.val() == null",

            "adminPasswordEnabled": {
              ".validate": "newData.isBoolean()"
            },
            "normalPasswordEnabled": {
              ".validate": "newData.isBoolean()"
            },
            "guestPasswordEnabled": {
              ".validate": "newData.isBoolean()"
            }
          }
        },

        // Guest links management
        "guestLinks": {
          ".read": "auth != null",
          ".write": "auth != null",

          "$guestLinkId": {
            ".validate": "newData.hasChildren(['createdBy', 'createdAt'])",

            "createdBy": {
              ".validate": "newData.isString()"
            },
            "createdAt": {
              ".validate": "newData.isNumber() || newData.val() == now"
            },
            "revoked": {
              ".validate": "newData.isBoolean()"
            },
            "revokedAt": {
              ".validate": "newData.isNumber() || newData.val() == now || newData.val() == null"
            },
            "revokedBy": {
              ".validate": "newData.isString() || newData.val() == null"
            }
          }
        },

        // Prevent additional top-level fields
        "$other": {
          ".validate": false
        }
      }
    },

    // Test endpoint for connection testing
    "test": {
      ".read": "auth != null",
      ".write": "auth != null",
      "connection": {
        ".validate": "newData.hasChildren(['timestamp', 'test']) || newData.val() == null",
        "timestamp": {
          ".validate": "newData.isNumber()"
        },
        "test": {
          ".validate": "newData.isString()"
        }
      }
    },

    // Global stats (read-only)
    "stats": {
      ".read": true,
      ".write": false
    },

    // Prevent access to any other paths
    "$other": {
      ".read": false,
      ".write": false
    }
  }
}
