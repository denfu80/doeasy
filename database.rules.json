{
  "rules": {
    // Top-level guest links (decoupled from lists for security)
    "guestLinks": {
      // Allow authenticated users to read all guest links
      ".read": "auth != null",

      "$guestLinkId": {
        // Only authenticated users can create/update guest links
        ".write": "auth != null",

        // Validate guest link structure
        ".validate": "newData.hasChildren(['listId', 'createdBy', 'createdAt', 'revoked'])",

        "listId": {
          ".validate": "newData.isString() && newData.val().matches(/^[a-zA-Z0-9\\-]{3,100}$/)"
        },
        "createdBy": {
          ".validate": "newData.isString()"
        },
        "createdAt": {
          ".validate": "newData.isNumber() || newData.val() == now"
        },
        "revoked": {
          ".validate": "newData.isBoolean()"
        },
        "revokedAt": {
          ".validate": "newData.isNumber() || newData.val() == now || newData.val() == null"
        },
        "revokedBy": {
          ".validate": "newData.isString() || newData.val() == null"
        },

        // Prevent additional fields
        "$other": {
          ".validate": false
        }
      }
    },

    // Global read/write rules for lists
    "lists": {
      "$listId": {
        // Validate readable ID format (letters, numbers, hyphens)
        ".validate": "$listId.matches(/^[a-zA-Z0-9\\-]{3,100}$/)",
        // Allow read/write access to any authenticated user (anonymous or signed-in)
        ".read": "auth != null",
        ".write": "auth != null",
        
        // Todos structure
        "todos": {
          "$todoId": {
            // Allow flexible todo structure with activity tracking fields
            
            // Todo fields validation
            "text": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 500"
            },
            "completed": {
              ".validate": "newData.isBoolean()"
            },
            "createdAt": {
              ".validate": "newData.isNumber() || newData.val() == now"
            },
            "createdBy": {
              ".validate": "newData.isString() && newData.val() == auth.uid"
            },
            "creatorName": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            "deletedAt": {
              ".validate": "newData.isNumber() || newData.val() == now || newData.val() == null"
            },
            "deletedBy": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            
            // Activity tracking fields
            "completedAt": {
              ".validate": "newData.isNumber() || newData.val() == now || newData.val() == null"
            },
            "completedBy": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            "updatedAt": {
              ".validate": "newData.isNumber() || newData.val() == now || newData.val() == null"
            },
            "updatedBy": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            "restoredAt": {
              ".validate": "newData.isNumber() || newData.val() == now || newData.val() == null"
            },
            "restoredBy": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            
            // Prevent additional fields
            "$other": {
              ".validate": false
            }
          }
        },
        
        // Presence structure
        "presence": {
          // Allow all authenticated users to read presence data (for avatars)
          ".read": "auth != null",
          
          "$userId": {
            // Users can only write their own presence
            ".write": "auth != null && auth.uid == $userId",
            
            // Validate presence structure
            ".validate": "newData.hasChildren(['name', 'color', 'lastSeen'])",
            
            // Presence fields validation
            "name": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            "color": {
              ".validate": "newData.isString() && newData.val().matches(/^#[0-9a-fA-F]{6}$/)"
            },
            "lastSeen": {
              ".validate": "newData.isNumber() || newData.val() == now"
            },
            "isTyping": {
              ".validate": "newData.isBoolean()"
            },
            "editingTodoId": {
              ".validate": "newData.isString() || newData.val() == null"
            },
            
            // Prevent additional fields
            "$other": {
              ".validate": false
            }
          }
        },
        
        // List metadata (optional)
        "metadata": {
          // Allow read/write access to any authenticated user
          ".read": "auth != null",
          ".write": "auth != null",
          
          // Allow flexible metadata structure - name field is optional
          "name": {
            ".validate": "(newData.isString() && newData.val().length > 0 && newData.val().length <= 100) || newData.val() == null"
          },
          "title": {
            ".validate": "newData.isString() && newData.val().length <= 100"
          },
          "createdAt": {
            ".validate": "newData.isNumber() || newData.val() == now"
          },
          "createdBy": {
            ".validate": "newData.isString()"
          },
          "description": {
            ".validate": "newData.isString() && newData.val().length <= 1000"
          },
          "isPublic": {
            ".validate": "newData.isBoolean()"
          }
        },

        // Prevent additional top-level fields
        "$other": {
          ".validate": false
        }
      }
    },
    
    // Test endpoint for connection testing
    "test": {
      ".read": "auth != null",
      ".write": "auth != null",
      "connection": {
        ".validate": "newData.hasChildren(['timestamp', 'test']) || newData.val() == null",
        "timestamp": {
          ".validate": "newData.isNumber()"
        },
        "test": {
          ".validate": "newData.isString()"
        }
      }
    },
    
    // Global stats (read-only)
    "stats": {
      ".read": true,
      ".write": false
    },
    
    // Prevent access to any other paths
    "$other": {
      ".read": false,
      ".write": false
    }
  }
}